import { type } from '../index.js'

test('union behavior of any', () => {
	type.equal<any | undefined, any>(true)
	type.equal<any | null, any>(true)
	type.equal<any | boolean, any>(true)
	type.equal<any | true, any>(true)
	type.equal<any | false, any>(true)
	type.equal<any | number, any>(true)
	type.equal<any | 1, any>(true)
	type.equal<any | string, any>(true)
	type.equal<any | '', any>(true)
	type.equal<any | symbol, any>(true)
	type.equal<any | bigint, any>(true)
	type.equal<any | 1n, any>(true)
	type.equal<any | {}, any>(true)
	type.equal<any | { a: 1 }, any>(true)
	type.equal<any | string[], any>(true)
	type.equal<any | [], any>(true)
	type.equal<any | Function, any>(true)
	type.equal<any | (() => void), any>(true)

	type.equal<any | any, any>(true)
	type.equal<any | unknown, any>(true)
	type.equal<any | never, any>(true)
	type.equal<any | void, any>(true)
})

test('intersection behavior of any', () => {
	type.equal<any & undefined, any>(true)
	type.equal<any & null, any>(true)
	type.equal<any & boolean, any>(true)
	type.equal<any & true, any>(true)
	type.equal<any & false, any>(true)
	type.equal<any & number, any>(true)
	type.equal<any & 1, any>(true)
	type.equal<any & string, any>(true)
	type.equal<any & '', any>(true)
	type.equal<any & symbol, any>(true)
	type.equal<any & bigint, any>(true)
	type.equal<any & 1n, any>(true)
	type.equal<any & {}, any>(true)
	type.equal<any & { a: 1 }, any>(true)
	type.equal<any & string[], any>(true)
	type.equal<any & [], any>(true)
	type.equal<any & Function, any>(true)
	type.equal<any & (() => void), any>(true)

	type.equal<any & any, any>(true)
	type.equal<any & unknown, any>(true)
	type.equal<any & never, never>(true)
	type.equal<any & void, any>(true)
})
